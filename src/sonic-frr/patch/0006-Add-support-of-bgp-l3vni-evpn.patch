From 33ef25687efea07083afc36c476ddc82c6c48e72 Mon Sep 17 00:00:00 2001
From: Kishore Kunal <kishore.kunal@broadcom.com>
Date: Fri, 15 Jan 2021 15:52:13 -0800
Subject: [PATCH 06/10] This is temp patch till Prefix to ARP indirection is
 add in neighorch

---
 lib/nexthop.c             |  2 ++
 lib/nexthop.h             |  6 ++++++
 zebra/rt_netlink.c        |  2 +-
 zebra/zapi_msg.c          |  4 ++++
 zebra/zebra_dplane.c      |  1 +
 zebra/zebra_fpm_netlink.c | 20 ++++++++++++++++++++
 6 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/lib/nexthop.c b/lib/nexthop.c
index 86beac2c4..82613bb98 100644
--- a/lib/nexthop.c
+++ b/lib/nexthop.c
@@ -823,6 +823,8 @@ void nexthop_copy_no_recurse(struct nexthop *copy,
 	memcpy(&copy->gate, &nexthop->gate, sizeof(nexthop->gate));
 	memcpy(&copy->src, &nexthop->src, sizeof(nexthop->src));
 	memcpy(&copy->rmap_src, &nexthop->rmap_src, sizeof(nexthop->rmap_src));
+	memcpy(&copy->nh_encap.encap_data.rmac, &nexthop->nh_encap.encap_data.rmac, ETH_ALEN);
+
 	copy->rparent = rparent;
 	if (nexthop->nh_label)
 		nexthop_add_labels(copy, nexthop->nh_label_type,
diff --git a/lib/nexthop.h b/lib/nexthop.h
index 606ad7c10..616b3970e 100644
--- a/lib/nexthop.h
+++ b/lib/nexthop.h
@@ -66,6 +66,11 @@ enum nh_encap_type {
 /* Backup index value is limited */
 #define NEXTHOP_BACKUP_IDX_MAX 255
 
+struct vxlan_nh_encap {
+	vni_t vni;
+	struct ethaddr rmac;
+};
+
 /* Nexthop structure. */
 struct nexthop {
 	struct nexthop *next;
@@ -139,6 +144,7 @@ struct nexthop {
 	enum nh_encap_type nh_encap_type;
 	union {
 		vni_t vni;
+		struct vxlan_nh_encap encap_data;
 	} nh_encap;
 
 	/* SR-TE color used for matching SR-TE policies */
diff --git a/zebra/rt_netlink.c b/zebra/rt_netlink.c
index f4f31cf77..1bf629534 100644
--- a/zebra/rt_netlink.c
+++ b/zebra/rt_netlink.c
@@ -1961,7 +1961,7 @@ static int netlink_route_nexthop_encap(struct nlmsghdr *n, size_t nlen,
 			return false;
 
 		if (!nl_attr_put32(n, nlen, 0 /* VXLAN_VNI */,
-				   nh->nh_encap.vni))
+				   nh->nh_encap.encap_data.vni))
 			return false;
 		nl_attr_nest_end(n, nest);
 		break;
diff --git a/zebra/zapi_msg.c b/zebra/zapi_msg.c
index 74361b980..a19dc8f48 100644
--- a/zebra/zapi_msg.c
+++ b/zebra/zapi_msg.c
@@ -1611,6 +1611,8 @@ static struct nexthop *nexthop_from_zapi(const struct zapi_nexthop *api_nh,
 			vtep_ip.ipa_type = IPADDR_V4;
 			memcpy(&(vtep_ip.ipaddr_v4), &(api_nh->gate.ipv4),
 			       sizeof(struct in_addr));
+			memcpy(&(nexthop->nh_encap.encap_data.rmac),
+				   &api_nh->rmac, ETH_ALEN);
 			zebra_rib_queue_evpn_route_add(
 				api_nh->vrf_id, &api_nh->rmac, &vtep_ip, p);
 			SET_FLAG(nexthop->flags, NEXTHOP_FLAG_EVPN);
@@ -1645,6 +1647,8 @@ static struct nexthop *nexthop_from_zapi(const struct zapi_nexthop *api_nh,
 			vtep_ip.ipa_type = IPADDR_V6;
 			memcpy(&vtep_ip.ipaddr_v6, &(api_nh->gate.ipv6),
 			       sizeof(struct in6_addr));
+			memcpy(&(nexthop->nh_encap.encap_data.rmac),
+				   &api_nh->rmac, ETH_ALEN);
 			zebra_rib_queue_evpn_route_add(
 				api_nh->vrf_id, &api_nh->rmac, &vtep_ip, p);
 			SET_FLAG(nexthop->flags, NEXTHOP_FLAG_EVPN);
diff --git a/zebra/zebra_dplane.c b/zebra/zebra_dplane.c
index 8dd2ada4b..c889ce016 100644
--- a/zebra/zebra_dplane.c
+++ b/zebra/zebra_dplane.c
@@ -2739,6 +2739,7 @@ int dplane_ctx_route_init(struct zebra_dplane_ctx *ctx, enum dplane_op_e op,
 		if (zl3vni && is_l3vni_oper_up(zl3vni)) {
 			nexthop->nh_encap_type = NET_VXLAN;
 			nexthop->nh_encap.vni = zl3vni->vni;
+			nexthop->nh_encap.encap_data.vni = zl3vni->vni;
 		}
 	}
 
diff --git a/zebra/zebra_fpm_netlink.c b/zebra/zebra_fpm_netlink.c
index 7f4517fe9..98083900a 100644
--- a/zebra/zebra_fpm_netlink.c
+++ b/zebra/zebra_fpm_netlink.c
@@ -105,10 +105,12 @@ static const char *fpm_nh_encap_type_to_str(enum fpm_nh_encap_type_t encap_type)
 
 struct vxlan_encap_info_t {
 	vni_t vni;
+	struct ethaddr rmac;
 };
 
 enum vxlan_encap_info_type_t {
 	VXLAN_VNI = 0,
+	VXLAN_RMAC = 1,
 };
 
 enum srv6_localsid_action_t {
@@ -353,6 +355,9 @@ static int netlink_route_info_add_nh(struct netlink_route_info *ri,
 		}
 
 		nhi.encap_info.vxlan_encap.vni = vni;
+		memcpy(&nhi.encap_info.vxlan_encap.rmac,
+				&(nexthop->nh_encap.encap_data.rmac),
+				ETH_ALEN);
 	} else if (nexthop->nh_srv6) {
 		if (nexthop->nh_srv6->seg6local_action != ZEBRA_SEG6_LOCAL_ACTION_UNSPEC) {
 			nhi.encap_info.encap_type = FPM_NH_ENCAP_SRV6_LOCAL_SID;
@@ -658,9 +663,16 @@ static int netlink_route_info_encode(struct netlink_route_info *ri,
 			nl_attr_put16(&req->n, in_buf_len, RTA_ENCAP_TYPE,
 				      encap);
 			vxlan = &nhi->encap_info.vxlan_encap;
+			char buf[ETHER_ADDR_STRLEN];
+
+			zfpm_debug(
+				"%s: VNI:%d RMAC:%s", __func__, vxlan->vni,
+				prefix_mac2str(&vxlan->rmac, buf, sizeof(buf)));
 			nest = nl_attr_nest(&req->n, in_buf_len, RTA_ENCAP);
 			nl_attr_put32(&req->n, in_buf_len, VXLAN_VNI,
 				      vxlan->vni);
+			nl_attr_put(&req->n, in_buf_len, VXLAN_RMAC,
+				    &vxlan->rmac, sizeof(vxlan->rmac));
 			nl_attr_nest_end(&req->n, nest);
 			break;
 		case FPM_NH_ENCAP_SRV6_LOCAL_SID: {
@@ -840,10 +852,18 @@ static int netlink_route_info_encode(struct netlink_route_info *ri,
 			nl_attr_put16(&req->n, in_buf_len, RTA_ENCAP_TYPE,
 				      encap);
 			vxlan = &nhi->encap_info.vxlan_encap;
+			char rmac_buf[ETHER_ADDR_STRLEN];
+
+			zfpm_debug("%s: Multi VNI:%d RMAC:%s", __func__,
+				   vxlan->vni,
+				   prefix_mac2str(&vxlan->rmac, rmac_buf,
+						  sizeof(rmac_buf)));
 			inner_nest =
 				nl_attr_nest(&req->n, in_buf_len, RTA_ENCAP);
 			nl_attr_put32(&req->n, in_buf_len, VXLAN_VNI,
 				      vxlan->vni);
+			nl_attr_put(&req->n, in_buf_len, VXLAN_RMAC,
+				    &vxlan->rmac, sizeof(vxlan->rmac));
 			nl_attr_nest_end(&req->n, inner_nest);
 			break;
 		}
-- 
2.25.1

